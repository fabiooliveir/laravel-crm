name: Build and deploy container app to Azure

on:
  push:
    # Gatilho para a branch que configurou na sua credencial federada
    branches:
      - '2.1'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Permissões necessárias para a autenticação OIDC
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Etapa de login no Azure usando as credenciais federadas (OIDC)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Etapa para criar o Azure Container Registry (ACR) se não existir
      - name: Create or get Azure Container Registry
        id: acr
        run: |
          ACR_NAME="pipegrowacr" # Escolha um nome único e em minúsculas
          ACR_EXISTS=$(az acr list --resource-group pipegrow --query "[?name=='$ACR_NAME'].name" -o tsv)
          if [ -z "$ACR_EXISTS" ]; then
            echo "Creating ACR: $ACR_NAME"
            az acr create --resource-group pipegrow --name $ACR_NAME --sku Basic
          else
            echo "ACR '$ACR_NAME' already exists."
          fi
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_OUTPUT

      # Etapa para fazer login no ACR (autentica-se automaticamente com a sessão do Azure)
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.acr.outputs.ACR_NAME }}.azurecr.io

      # Etapa para construir e enviar a imagem Docker para o ACR
      - name: Build and push Docker image
        run: |
          docker build . -t ${{ steps.acr.outputs.ACR_NAME }}.azurecr.io/laravel-crm:${{ github.sha }}
          docker push ${{ steps.acr.outputs.ACR_NAME }}.azurecr.io/laravel-crm:${{ github.sha }}

      # Etapa final para implantar no Azure Container Apps
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: app
          resourceGroup: pipegrow
          imageToDeploy: ${{ steps.acr.outputs.ACR_NAME }}.azurecr.io/laravel-crm:${{ github.sha }}
          ingress: 'external'
          targetPort: 8080
          environmentVariables: |
            APP_KEY=${{ secrets.APP_KEY }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ADMIN_NAME=${{ secrets.ADMIN_NAME }}
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            CACHE_DRIVER=database
            SESSION_DRIVER=database
            QUEUE_CONNECTION=database
